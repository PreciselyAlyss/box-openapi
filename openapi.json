{
  "openapi": "3.0.2",
  "info": {
    "title": "Box Platform 2.0 APIs",
    "description": "The Box Content API gives you access to secure content management and content experience features for use in your own app. It strives to be RESTful and is organized around the main resources youâ€™re familiar with from the Box web interface.",
    "termsOfService": "https://cloud.app.box.com/s/rmwxu64h1ipr41u49w3bbuvbsa29wku9",
    "contact": {
      "name": "Box Developer Relations",
      "url": "https://developer.box.com",
      "email": "devrel@box.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "2.0"
  },
  "servers": [
    {
      "url": "https://api.box.com/2.0",
      "description": "Box Platform API server"
    }
  ],
  "paths": {
    "/authorize": {
      "get": {
        "operationId": "get_authorize",
        "summary": "Authorize a user",
        "description": "Authorize a user by sending them through [Box](https://box.com).\n\nTo begin the process of authenticating user and authorizing your\napplication to work with the Box APIs, you will need to send a\nuser to a URL with this format.",
        "tags": [
          "Authorization"
        ],
        "security": [],
        "servers": [
          {
            "url": "https://account.box.com/api/oauth2",
            "description": "Server for client-side authentication"
          }
        ],
        "parameters": [
          {
            "name": "response_type",
            "description": "The string value `\"code\"` is the only current value we support\nfor the OAuth2 grant type.",
            "in": "query",
            "example": "5idyGSFuf54zrvKm",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "code"
              ]
            }
          },
          {
            "name": "client_id",
            "description": "The Client ID of the application that is requesting to authenticate\nthe user. To get the Client ID for your application, log in to your\nBox developer console and click the **Edit Application** link for\nthe application you're working with. In the OAuth2 Parameters section\nof the configuration page, find the item labeled **client_id**. The\ntext of that item is your application's Client ID.",
            "in": "query",
            "example": "ly1nj6n11vionaie65emwzk575hnnmrk",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "description": "The URL to which Box redirects the browser after the user has granted\nor rejected the application permission. This URL must match the\nredirect URL in the configuration of your application. It must be a\nvalid HTTPS URL and it needs to be able to handle the redirection to\ncomplete the next step in the OAuth2 flow.",
            "in": "query",
            "example": "http://example.com/auth/callback",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "description": "A custom string of your choice. Box will pass the same string to\nthe redirect URL when authentication is complete. This parameter\ncan be used to identify a user on redirect, as well as protect\nagainst hijacked sessions and other attacks.",
            "in": "query",
            "example": "my_state",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "description": "A comma-separated list of application scopes you'd like to\nauthenticate the user for. This defaults to all the scopes configured\nfor the application in its configuration page.",
            "in": "query",
            "example": "admin_readwrite",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A login and approval page",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "format": "html"
                }
              }
            }
          }
        }
      }
    },
    "/oauth2/token": {
      "post": {
        "operationId": "post_oauth2_token",
        "summary": "Request an Access Token",
        "description": "Request an Access Token using either client-side obtained OAuth2\nauthorization code or a JWT assertion.\n\nAn access token is a data string that enables Box to verify that a\nrequest belongs to an authorized session. In the normal order of operations\nyou will begin by requesting authentication from the Box authorize endpoint\nand Box will send you an authorization code. You will then send this code\nto this endpoint to exchange it for an access token.\n\nThe returned Access Token can then be used to to make Box API calls.",
        "tags": [
          "Authorization"
        ],
        "security": [],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A new access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "400": {
            "description": "A generic authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Error"
                }
              }
            }
          }
        }
      }
    },
    "/oauth2/revoke": {
      "post": {
        "operationId": "post_oauth2_revoke",
        "summary": "Revoke an Access Token",
        "description": "This is the URL of the Box revoke endpoint, the endpoint that revokes access\ntokens, or to put it another way, the endpoint that ends sessions, logging\nusers out.",
        "tags": [
          "Authorization"
        ],
        "security": [],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenRevocationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The access token has been revoked"
          },
          "400": {
            "description": "An OAuth2 error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Error"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}": {
      "get": {
        "operationId": "get_folders_id",
        "summary": "Retrieve a folder",
        "tags": [
          "Folder"
        ],
        "description": "Retrieve the details about a folder, including the first 100 entries in the\nfolder.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The ID of the folder to retrieve. The root folder of a Box account is\nalways represented by the id `\"0\"`.",
            "example": "12345",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "A comma-separated list of folder attributes to include in the\nresponse. This can be used to request fields that are not normally\nreturned in a standard response.",
            "in": "query",
            "example": "id,type,name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A standard folder object, including the first 100 entries in the folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "default": {
            "description": "A client error can occur of the user does not have access to the folder,\nthe folder does not exists, or incorrect parameters are passed in the\nrequest.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "put_folders_id",
        "summary": "Update Folder, Create Shared Link, Create or Delete",
        "description": "Used to update information about the folder. To move a folder, update the ID\nof its parent. To enable an email address that can be used to upload files to\nthis folder, update the folder_upload_email attribute. An optional If-Match\nheader can be included to ensure that client only updates the folder if it\nknows about the latest version.\n\n\nUsed to create a shared link for this particular folder. Please see here for\nmore information on the permissions available for shared links. In order to\nget default shared link status, set it to an empty access level, i.e.\n`{\"shared_link\": {}}`. In order to disable a shared link, send this same type\nof `PUT` request with the value of shared_link set to null, i.e.\n`{\"shared_link\": null}`\n\n\nTo add or remove an item from a collection, you do a PUT on that item and\nchange the list of collections it belongs to. Philosophically, this is similar\nto the way \"move\" operations work on files and folders - you do a `PUT` on the\nitem and change its parent. Itâ€™s the same idea with collections, except youâ€™re\nchanging which collection(s) the item belongs to instead of the folder it\nbelongs to. Currently the only collection available is the favorites\ncollection, and youâ€™ll need to know itâ€™s ID for the user that is making the\nAPI call, since every user has a different favorites collection_id.\n\nThe Add/Remove API handling will check all ids passed in before performing any\nadd/removal operations. If any collection ids are malformed or do not exist in\nthe userâ€™s account, the API call will throw a 400. Only if all of the\ncollection ids are valid will the adds and removals be carried out.",
        "tags": [
          "Folder"
        ],
        "parameters": [
          {
            "name": "folder_id",
            "example": "123456",
            "description": "The ID of the folder to update. The root folder of a Box account is\nalways represented by the id \"0\".",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "Attribute(s) to include in the response",
            "in": "query",
            "example": "id,name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "description": "This is in the `etag` field of the folder object.",
            "example": "1",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The desired name for the folder",
                    "example": "New Folder"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the folder.",
                    "example": "Some pictures I took"
                  },
                  "sync_state": {
                    "type": "string",
                    "example": "synced",
                    "description": "Whether Box Sync clients will sync this folder. Values\nof `synced` or` not_synced` can be sent.",
                    "enum": [
                      "synced",
                      "not_synced"
                    ]
                  },
                  "can_non_owners_invite": {
                    "type": "boolean",
                    "example": true,
                    "description": "If this parameter is set to false, only folder owners and\nco-owners can send collaborator invites"
                  },
                  "is_collaboration_restricted_to_enterprise": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether to restrict future collaborations to within the\nenterprise. Does not affect existing collaborations."
                  },
                  "parent": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the parent folder",
                        "example": "11446498"
                      }
                    }
                  },
                  "shared_link": {
                    "type": "object",
                    "properties": {
                      "access": {
                        "type": "string",
                        "description": "The level of access. Can be `open` (\"People with the link\"),\n`company` (\"People in your company\"), or `collaborators`\n(\"People in this folder\").\n\nIf you omit this field then the access level will be set to\nthe default access level specified by the enterprise admin.",
                        "enum": [
                          "open",
                          "company",
                          "collaborators"
                        ],
                        "example": "open"
                      },
                      "password": {
                        "type": "string",
                        "description": "The password required to access the shared link. Set to null\nto remove the password.",
                        "example": "do-not-use-this-password"
                      },
                      "unshared_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2012-12-12T10:53:43-08:00",
                        "description": "The date-time that this link will become disabled. This field\ncan only be set by users with paid accounts."
                      },
                      "permissions": {
                        "type": "object",
                        "properties": {
                          "can_download": {
                            "type": "boolean",
                            "example": true,
                            "description": "Whether the shared link allows downloads. For shared links\non folders, this also applies to any items in the folder.\nCan only be set with access levels `open` and `company`\n(not `collaborators`)."
                          }
                        }
                      }
                    }
                  },
                  "folder_upload_email": {
                    "type": "object",
                    "properties": {
                      "access": {
                        "type": "string",
                        "example": "open",
                        "description": "Can be `open` or `collaborators`"
                      }
                    }
                  },
                  "owned_by": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "123456",
                        "description": "The ID of the user (should be your own user ID)"
                      }
                    }
                  },
                  "tags": {
                    "type": "array",
                    "example": [
                      "approved"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "description": "The tags to attach this folder. To add/remove a tag to/from a\nfolder, you can first get the folderâ€™s current tags, then modify\nthe list as required. Finally, set the folderâ€™s entire list of\ntags."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "201": {
            "description": "When 'collections' is specified in body the folder is moved into\ncollection with the ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "default": {
            "description": "Update Folder info error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_folders_id",
        "summary": "Delete a folder",
        "description": "Permanently delete a folder. This can normally not be undone.",
        "tags": [
          "Folder"
        ],
        "parameters": [
          {
            "name": "folder_id",
            "description": "The ID of the folder to delete.",
            "in": "path",
            "required": true,
            "example": "123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "description": "Delete a folder that is not empty by recursively deleting the\nfolder and all of its content.",
            "in": "query",
            "required": false,
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "If-Match",
            "description": "Ensure a folder is only deleted if its `etag` matches the\n`etag` passed in this header.",
            "in": "header",
            "required": false,
            "example": 1,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response when the folder is successfully deleted."
          },
          "default": {
            "description": "A client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}/items": {
      "get": {
        "operationId": "get_folders_id_items",
        "summary": "Get Folderâ€™s Items",
        "tags": [
          "Folder"
        ],
        "description": "Retrieves the files and/or folders contained within this folder without any\nother metadata about the folder. Any attribute in the full files or folders\nobjects can be passed in with the fields parameter to get specific attributes,\nand only those specific attributes back; otherwise, the mini format is\nreturned for each item by default.",
        "parameters": [
          {
            "name": "folder_id",
            "description": "The ID of the folder to fetch items for",
            "example": "123456",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "File/folder attribute(s) to include for the items returned",
            "example": "id,name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return in a page.",
            "in": "query",
            "required": false,
            "example": 1000,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "offset",
            "description": "The offset at which to begin the response. An offset of value of 0 will\nstart at the beginning of the folder-listing. Note that if there are\nhidden items in your previous response, your next offset should be the\noffset plus the limit, not the number of records you received back.",
            "in": "query",
            "required": false,
            "example": 5000,
            "schema": {
              "type": "string",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of items contained in the folder is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemReferenceCollection"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          }
        }
      }
    },
    "/folders": {
      "post": {
        "operationId": "post_folders",
        "summary": "Create Folder",
        "tags": [
          "Folder"
        ],
        "description": "Used to create a new empty folder. The new folder will be created inside of\nthe specified parent folder",
        "parameters": [
          {
            "name": "fields",
            "description": "Attribute(s) to include in the response",
            "in": "query",
            "example": "id,name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The desired name for the folder",
                    "example": "New Folder"
                  },
                  "parent": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the parent folder",
                        "example": "11446498"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A full folder object is returned if the parent folder ID is valid and if\nno name collisions occur.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "default": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}/copy": {
      "post": {
        "operationId": "post_folders_id_copy",
        "summary": "Copy Folder",
        "description": "Used to create a copy of a folder in another folder. The original version of\nthe folder will not be altered.",
        "tags": [
          "Folder"
        ],
        "parameters": [
          {
            "name": "folder_id",
            "description": "The ID of the folder to copy",
            "example": "123456",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "Attribute(s) to include in the response",
            "example": "id,name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "An optional new name for the folder",
                    "example": "New Folder"
                  },
                  "parent": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the destination folder",
                        "example": "11446498"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A full folder object is returned if the ID is valid and if the update is\nsuccessful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "409": {
            "description": "If the intended destination folder is the same, as this will cause a name\ncollision.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          },
          "default": {
            "description": "Copy folder operation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folder_id}/collaborations": {
      "get": {
        "operationId": "get_folders_id_collaborations",
        "summary": "Get Folder Collaborations",
        "description": "Use this to get a list of all the collaborations on a folder i.e. all of the\nusers that have access to that folder.",
        "tags": [
          "Folder"
        ],
        "parameters": [
          {
            "name": "folder_id",
            "description": "The ID of the folder to get collaborations for",
            "example": "123456",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "description": "Attribute(s) to include in the response",
            "example": "id,name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "The maximum number of items to return in a page. The default is 100 and\nthe max is 1000.",
            "in": "query",
            "required": false,
            "example": 1000,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "offset",
            "description": "The item at which to begin the response",
            "in": "query",
            "required": false,
            "example": 1000,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of collaboration objects are returned. If there are no\ncollaborations on this folder, an empty collection will be returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollaborationCollection"
                }
              }
            }
          },
          "default": {
            "description": "Get folder collaborations operation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "OAuth2Security": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://account.box.com/api/oauth2/authorize",
            "tokenUrl": "https://api.box.com/oauth2/token",
            "scopes": {
              "root_readonly": "Read all files and folders stored in Box",
              "root_readwrite": "Read and write all files and folders stored in Box",
              "manage_app_users": "Provision and manage app users",
              "manage_managed_users": "Provision and manage managed users",
              "manage_groups": "Manage an enterprise's groups",
              "manage_webhook": "Create webhooks programmatically through the API",
              "manage_enterprise_properties": "Manage enterprise properties",
              "manage_data_retention": "Manage data retention polices",
              "manage_legal_hold": "Manage Legal Holds"
            }
          }
        }
      }
    },
    "schemas": {
      "AccessToken": {
        "description": "A token that can be used to make authenticated API calls",
        "allOf": [
          {
            "$ref": "#/components/schemas/AccessToken--Mini"
          },
          {
            "properties": {
              "refresh_token": {
                "type": "string",
                "format": "token",
                "example": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ",
                "description": "The refresh token for this access token, which can be used\nto request a new access token when the current one expires."
              },
              "issued_token_type": {
                "type": "string",
                "example": "urn:ietf:params:oauth:token-type:access_token",
                "enum": [
                  "urn:ietf:params:oauth:token-type:access_token"
                ],
                "description": "The type of downscoped access token returned. This is only\nreturned if an access token has been downscoped."
              }
            }
          }
        ]
      },
      "AccessToken--Mini": {
        "description": "The basics of an access token",
        "properties": {
          "access_token": {
            "type": "string",
            "format": "token",
            "example": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ",
            "description": "The requested access token."
          },
          "expires_in": {
            "type": "integer",
            "format": "int64",
            "example": 3600,
            "description": "The time in seconds in seconds by which this token will expire."
          },
          "token_type": {
            "type": "string",
            "enum": [
              "bearer"
            ],
            "example": "bearer",
            "description": "The type of access token returned."
          },
          "restricted_to": {
            "type": "array",
            "example": "[{ object: <File...>, scope: \"annotation_view_self\"}]",
            "description": "The permissions that this access token permits,\nproviding a list of resources (files, folders, etc)\nand the scopes permitted for each of those resources.",
            "items": {
              "$ref": "#/components/schemas/FileScope"
            }
          }
        }
      },
      "AssignmentCounts": {
        "description": "Counts of assignments within this a legal hold policy by item type",
        "properties": {
          "user": {
            "type": "integer",
            "format": "int64",
            "description": "The number of users this policy is applied to",
            "example": 1
          },
          "folder": {
            "type": "integer",
            "format": "int64",
            "description": "The number of folders this policy is applied to",
            "example": 2
          },
          "file": {
            "type": "integer",
            "format": "int64",
            "description": "The number of files this policy is applied to",
            "example": 3
          },
          "file_version": {
            "type": "integer",
            "format": "int64",
            "description": "The number of file versions this policy is applied to",
            "example": 4
          }
        }
      },
      "ClientError": {
        "description": "A generic error",
        "properties": {
          "type": {
            "description": "Always `error`",
            "example": "`error`",
            "type": "string",
            "enum": [
              "error"
            ]
          },
          "status": {
            "description": "The HTTP status of the response.",
            "example": 400,
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "description": "A Box-specific error code",
            "example": "item_name_invalid",
            "type": "string"
          },
          "help_url": {
            "description": "A URL that links to more information about why the error occurred.",
            "example": "http://developers.box.com/docs/#errors",
            "type": "string"
          },
          "message": {
            "description": "A human-readable message describing the error.",
            "example": "Item name invalid",
            "type": "string"
          },
          "request_id": {
            "description": "The unique ID for this request as can be used when contacting\nBox support.",
            "type": "string",
            "example": "abcdef123456"
          }
        }
      },
      "Collaboration": {
        "description": "Collaborations define access permissions for users and groups to files and\nfolders, similar to access control lists. A collaboration object grants a\nuser or group access to a file or folder with permissions defined by a\nspecific role.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "item": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ItemReference"
                  },
                  {
                    "description": "The file or folder that access is granted to"
                  }
                ]
              },
              "accessible_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user or group that is granted access"
                  }
                ]
              },
              "invite_email": {
                "type": "string",
                "example": "john@example.com",
                "description": "The email address used to invite an unregistered collaborator, if\nthey are not a registered user."
              },
              "role": {
                "type": "string",
                "example": "editor",
                "enum": [
                  "editor",
                  "viewer",
                  "previewer",
                  "uploader",
                  "preview uploader",
                  "viewer uploader",
                  "co-owner",
                  "owner"
                ],
                "description": "The level of access granted."
              },
              "expires_at": {
                "type": "string",
                "format": "date-time",
                "example": "2012-12-12T10:53:43-08:00",
                "description": "When the collaboration will expire"
              },
              "can_view_path": {
                "type": "boolean",
                "example": true,
                "description": "Whether the \"view path collaboration\" feature is enabled or not. View\npath collaborations allow the invitee to see the entire parent path to\nthe item. View path collaboration does not grant privileges in any\nparent folder (e.g. cannot see content the user is not collaborated\non), other than the permission to view the parent path."
              },
              "status": {
                "type": "string",
                "example": "accepted",
                "enum": [
                  "accepted",
                  "pending",
                  "rejected"
                ],
                "description": "The status of the collaboration invitation."
              },
              "acknowledged_at": {
                "type": "string",
                "format": "date-time",
                "example": "2012-12-12T10:53:43-08:00",
                "description": "When the `status` of the collaboration object changed to\n`accepted` or `rejected`"
              },
              "created_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who created the collaboration object"
                  }
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "example": "2012-12-12T10:53:43-08:00",
                "description": "When the collaboration object was created"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "example": "2012-12-12T10:53:43-08:00",
                "description": "When the collaboration object was last modified"
              }
            }
          }
        ]
      },
      "CollaborationCollection": {
        "description": "A list of collaborations",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "properties": {
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Collaboration"
                }
              }
            }
          }
        ]
      },
      "CollaborationWhitelistEntry": {
        "description": "A Collaboration Whitelist entry describes an\napproved domains that can collaborate with your enterprise",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "domain": {
                "type": "string",
                "example": "example.com",
                "description": "The whitelisted domain"
              },
              "direction": {
                "type": "string",
                "example": "both",
                "description": "The direction of the collaborations to whitelist",
                "enum": [
                  "inbound",
                  "outbound",
                  "both"
                ]
              },
              "enterprise": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Enterprise"
                  },
                  {
                    "description": "The enterprise this whitelist is applied to"
                  }
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time the whitelist entry was created",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "CollaborationWhitelistExemptTarget": {
        "description": "The record that represents a target user that is exempt from the\ncollaboration whitelist.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "enterprise": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Enterprise"
                  },
                  {
                    "description": "The enterprise this entry belongs to"
                  }
                ]
              },
              "user": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Enterprise"
                  },
                  {
                    "description": "The user that has been exempt"
                  }
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time the entry was created",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time the entry was modified",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "Comment": {
        "description": "Comments are messages created on files. Comments\ncan be made independently or created as responses to other\ncomments",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Comment--Standard"
          },
          {
            "properties": {
              "tagged_message": {
                "type": "string",
                "example": "@[1234567:Aaron Levie] these tigers are cool!",
                "description": "The string representing the comment text with\n@mentions included. @mention format is @[id:username]\nwhere `id` is user's Box ID an username is\ntheir display name."
              }
            }
          }
        ]
      },
      "Comment--Standard": {
        "description": "Standard representation of a comment, as returned by the\ncomment API endpoints and when nested within other resources.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "is_reply_comment": {
                "type": "boolean",
                "description": "Whether or not this comment is a reply to another\ncomment",
                "example": true
              },
              "message": {
                "type": "string",
                "example": "@Aaron Levie these tigers are cool!",
                "description": "The text of the comment, as provided by the user"
              },
              "created_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "A mini user object representing the author of the\ncomment"
                  }
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time this comment was created",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time this comment was last modified",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "item": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ItemReference"
                  },
                  {
                    "description": "The object this comment was placed on"
                  }
                ]
              }
            }
          }
        ]
      },
      "DevicePinner": {
        "description": "Device pins allow enterprises to control what devices can\nuse native Box applications.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "owned_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user that the device pin belongs to"
                  }
                ]
              },
              "product_name": {
                "type": "string",
                "description": "The type of device being pinned",
                "example": "iPad"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time the device pin was created",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time the device pin was modified",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "Enterprise": {
        "description": "A representation of a Box enterprise",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "name": {
                "description": "The name of the enterprise",
                "example": "Acme Inc.",
                "type": "string"
              }
            }
          }
        ]
      },
      "Event": {
        "description": "The description of an event that happened within Box",
        "properties": {
          "type": {
            "description": "`event`",
            "type": "string",
            "example": "event"
          },
          "event_id": {
            "type": "string",
            "example": "f82c3ba03e41f7e8a7608363cc6c0390183c3f83",
            "description": "The ID of the event object. You can use this to detect duplicate events"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User--Mini"
              },
              {
                "description": "The user that performed the action represented by the event.\nSome events may be performed by users not logged into Box.\nIn that case, not all attributes of the object are populated and the\nevent is attributed to a unknown user (`user_id = 2`)"
              }
            ]
          },
          "event_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventType"
              },
              {
                "description": "The event type that triggered this event"
              }
            ]
          },
          "session_id": {
            "type": "string",
            "example": "70090280850c8d2a1933c1",
            "description": "The session of the user that performed the action. Not all events will\npopulate this attribute."
          },
          "source": {
            "type": "object",
            "allOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/File--Standard"
                  },
                  {
                    "$ref": "#/components/schemas/Folder--Standard"
                  },
                  {
                    "$ref": "#/components/schemas/Comment"
                  }
                ]
              },
              {
                "description": "The object that triggered this event"
              }
            ]
          },
          "additional_details": {
            "type": "object",
            "example": "",
            "description": "This object provides additional information about the event if available.\n\nThis can include how a user performed an event as well as additional\ninformation to correlate an event to external Keysafe logs. Not all events\nhave an additional_details object.  This object is only available in the\nEnterprise Events."
          }
        }
      },
      "EventType": {
        "example": "FILE.UPLOADED",
        "type": "string",
        "description": "An event type that can trigger an event",
        "enum": [
          "ACCESS_GRANTED",
          "ACCESS_REVOKED",
          "ADD_DEVICE_ASSOCIATION",
          "ADD_LOGIN_ACTIVITY_DEVICE",
          "ADMIN_LOGIN",
          "APPLICATION_CREATED",
          "APPLICATION_PUBLIC_KEY_ADDED",
          "APPLICATION_PUBLIC_KEY_DELETED",
          "CHANGE_ADMIN_ROLE",
          "CHANGE_FOLDER_PERMISSION",
          "COLLABORATION_ACCEPT",
          "COLLABORATION_EXPIRATION",
          "COLLABORATION_INVITE",
          "COLLABORATION_REMOVE",
          "COLLABORATION_ROLE_CHANGE",
          "COLLAB_ADD_COLLABORATOR",
          "COLLAB_INVITE_COLLABORATOR",
          "COLLAB_REMOVE_COLLABORATOR",
          "COLLAB_ROLE_CHANGE",
          "COMMENT_CREATE",
          "COMMENT_DELETE",
          "CONTENT_WORKFLOW_ABNORMAL_DOWNLOAD_ACTIVITY",
          "CONTENT_WORKFLOW_AUTOMATION_ADD",
          "CONTENT_WORKFLOW_AUTOMATION_DELETE",
          "CONTENT_WORKFLOW_POLICY_ADD",
          "CONTENT_WORKFLOW_SHARING_POLICY_VIOLATION",
          "CONTENT_WORKFLOW_UPLOAD_POLICY_VIOLATION",
          "COPY",
          "DATA_RETENTION_CREATE_RETENTION",
          "DATA_RETENTION_REMOVE_RETENTION",
          "DELETE",
          "DELETE_USER",
          "DEVICE_TRUST_CHECK_FAILED",
          "DOWNLOAD",
          "EDIT",
          "EDIT_USER",
          "EMAIL_ALIAS_CONFIRM",
          "EMAIL_ALIAS_REMOVE",
          "ENABLE_TWO_FACTOR_AUTH",
          "FAILED_LOGIN",
          "FILE_MARKED_MALICIOUS",
          "FILE_WATERMARKED_DOWNLOAD",
          "GROUP_ADD_ITEM",
          "GROUP_ADD_USER",
          "GROUP_CREATION",
          "GROUP_DELETION",
          "GROUP_EDITED",
          "GROUP_REMOVE_ITEM",
          "GROUP_REMOVE_USER",
          "ITEM_COPY",
          "ITEM_CREATE",
          "ITEM_DOWNLOAD",
          "ITEM_MAKE_CURRENT_VERSION",
          "ITEM_MODIFY",
          "ITEM_MOVE",
          "ITEM_OPEN",
          "ITEM_PREVIEW",
          "ITEM_RENAME",
          "ITEM_SHARED",
          "ITEM_SHARED_CREATE",
          "ITEM_SHARED_UNSHARE",
          "ITEM_SHARED_UPDATE",
          "ITEM_SYNC",
          "ITEM_TRASH",
          "ITEM_UNDELETE_VIA_TRASH",
          "ITEM_UNSYNC",
          "ITEM_UPLOAD",
          "LEGAL_HOLD_ASSIGNMENT_CREATE",
          "LEGAL_HOLD_ASSIGNMENT_DELETE",
          "LEGAL_HOLD_POLICY_CREATE",
          "LEGAL_HOLD_POLICY_DELETE",
          "LEGAL_HOLD_POLICY_UPDATE",
          "LOCK",
          "LOCK_CREATE",
          "LOCK_DESTROY",
          "LOGIN",
          "MASTER_INVITE_ACCEPT",
          "MASTER_INVITE_REJECT",
          "METADATA_INSTANCE_CREATE",
          "METADATA_INSTANCE_DELETE",
          "METADATA_INSTANCE_UPDATE",
          "METADATA_TEMPLATE_CREATE",
          "METADATA_TEMPLATE_DELETE",
          "METADATA_TEMPLATE_UPDATE",
          "MOVE",
          "NEW_USER",
          "PREVIEW",
          "REMOVE_DEVICE_ASSOCIATION",
          "REMOVE_LOGIN_ACTIVITY_DEVICE",
          "RENAME",
          "RETENTION_POLICY_ASSIGNMENT_ADD",
          "SHARE",
          "SHARE_EXPIRATION",
          "STORAGE_EXPIRATION",
          "TAG_ITEM_CREATE",
          "TASK_ASSIGNMENT_CREATE",
          "TASK_ASSIGNMENT_DELETE",
          "TASK_ASSIGNMENT_UPDATE",
          "TASK_CREATE",
          "TASK_UPDATE",
          "TERMS_OF_SERVICE_ACCEPT",
          "TERMS_OF_SERVICE_REJECT",
          "UNDELETE",
          "UNLOCK",
          "UNSHARE",
          "UPDATE_COLLABORATION_EXPIRATION",
          "UPDATE_SHARE_EXPIRATION",
          "UPLOAD",
          "USER_AUTHENTICATE_OAUTH2_ACCESS_TOKEN_CREATE",
          "WATERMARK_LABEL_CREATE",
          "WATERMARK_LABEL_DELETE"
        ]
      },
      "File": {
        "description": "A full representation of a file, as can be returned from any\nfile API endpoints by default",
        "allOf": [
          {
            "$ref": "#/components/schemas/File--Standard"
          },
          {
            "properties": {
              "version_number": {
                "type": "string",
                "example": 1,
                "description": "The version number of this file"
              },
              "comment_count": {
                "type": "integer",
                "example": 10,
                "description": "The number of comments on this file"
              },
              "permissions": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Permissions"
                  },
                  {
                    "description": "An object containing the permissions that the current user has\nfor this item"
                  }
                ]
              },
              "tags": {
                "type": "array",
                "example": [
                  "approved"
                ],
                "items": {
                  "type": "string"
                },
                "description": "All tags applied to this folder."
              },
              "lock": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Lock"
                  },
                  {
                    "description": "The lock held on this file. If there is no lock, this can either\nbe `null` or have a timestamp in the past."
                  }
                ]
              },
              "extension": {
                "type": "string",
                "example": "png",
                "description": "Indicates the suffix, when available, on the file. By default,\nset to an empty string. The suffix usually indicates the encoding\n(file format) of the file contents or usage."
              },
              "is_package": {
                "type": "boolean",
                "example": true,
                "description": "Whether the file is a package. Used for Mac Packages used by iWorks."
              },
              "expiring_embed_link": {
                "type": "string",
                "example": "https://app.box.com/preview/expiring_embed/gvoct6FE!",
                "description": "An expiring URL for an embedded preview session in an iframe.\nThis URL will expire after 60 seconds and the session will\nexpire after 60 minutes."
              },
              "watermark_info": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WatermarkInfo"
                  },
                  {
                    "description": "Information about the watermarking on this file"
                  }
                ]
              },
              "allowed_invitee_roles": {
                "type": "array",
                "description": "Folder [collaboration](#collaboration-object) roles allowed by the\nenterprise administrator.",
                "items": {
                  "type": "string"
                }
              },
              "is_externally_owned": {
                "type": "boolean",
                "example": true,
                "description": "Whether this file is owned by a user outside of the enterprise."
              },
              "has_collaborations": {
                "type": "boolean",
                "example": true,
                "description": "Whether this file has any collaborators."
              },
              "metadata": {
                "type": "object",
                "description": "The scope of the metadata",
                "example": "global",
                "additionalProperties": {
                  "type": "object",
                  "description": "The template name for the metadata",
                  "example": "properties",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          }
        ]
      },
      "File--Standard": {
        "description": "A standard representation of a file, as returned from any\nfile API endpoints by default",
        "allOf": [
          {
            "$ref": "#/components/schemas/File--Mini"
          },
          {
            "properties": {
              "sha1": {
                "type": "string",
                "format": "hash",
                "example": "85136C79CBF9FE36BB9D05D0639C70C265C18D37",
                "description": "The SHA1 hash of the file."
              },
              "description": {
                "type": "string",
                "description": "The description of the file",
                "maxLength": 256,
                "example": "Some pictures I took"
              },
              "size": {
                "type": "integer",
                "description": "The file size in bytes. Be careful parsing this integer, it can\neasily go into [exponent notation](http://en.wikipedia.org/wiki/\\\nDouble-precision_floating-point_format).",
                "example": 629644
              },
              "path_collection": {
                "type": "array",
                "description": "The path of folders to this file, starting at the root",
                "items": {
                  "$ref": "#/components/schemas/Folder--Mini"
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this file was upload to Boxâ€™s servers",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this file was last updated on the Box servers",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "trashed_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this file was last moved to the trash",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "purged_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this file will be permanently deleted",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "content_created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this file was created originally",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "content_modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this file was last updated",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "expires_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the file will automatically be deleted",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "created_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who created this file"
                  }
                ]
              },
              "modified_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who last modified this file"
                  }
                ]
              },
              "owned_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who owns this file"
                  }
                ]
              },
              "shared_link": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SharedLink"
                  },
                  {
                    "description": "The shared link object for this file. Will be\n`null` if no shared link has been created."
                  }
                ]
              },
              "parent": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Folder--Mini"
                  },
                  {
                    "description": "The folder that contains this file."
                  }
                ]
              },
              "item_status": {
                "type": "string",
                "example": "active",
                "enum": [
                  "active",
                  "trashed",
                  "deleted"
                ],
                "description": "Whether this item is deleted or not. Values include `active`,\n`trashed` if the file has been moved to the trash, and `deleted` if\nthe file has been permanently deleted"
              }
            }
          }
        ]
      },
      "File--Mini": {
        "description": "A mini representation of a file, used when\nnested under another resource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ItemReference"
          },
          {
            "properties": {
              "sequence_id": {
                "type": "string",
                "example": "1",
                "description": "A unique ID for use with the /events endpoint"
              },
              "etag": {
                "type": "string",
                "example": "1",
                "description": "The entity tag of this file object. Used with `If-Match`\nheaders."
              },
              "name": {
                "type": "string",
                "description": "The name of the file",
                "example": "Pictures"
              }
            }
          }
        ]
      },
      "FileScope": {
        "description": "A relation between a file and the scopes for which the file can be accessed",
        "properties": {
          "object": {
            "allOf": [
              {
                "$ref": "#/components/schemas/File"
              },
              {
                "description": "The file for which the file can be accessed"
              }
            ]
          },
          "scope": {
            "type": "string",
            "description": "The file scopes for the file access",
            "example": "item_download",
            "enum": [
              "annotation_edit",
              "annotation_view_all",
              "annotation_view_self",
              "base_explorer",
              "base_picker",
              "base_preview",
              "base_upload",
              "item_delete",
              "item_download",
              "item_preview",
              "item_rename",
              "item_share",
              "item_upload"
            ]
          }
        }
      },
      "FileVersion": {
        "description": "A full representation of a file version",
        "allOf": [
          {
            "$ref": "#/components/schemas/FileVersion--Mini"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the file version",
                "example": "tigers.jpeg"
              },
              "size": {
                "type": "integer",
                "format": "int64",
                "description": "Size of the file version in bytes",
                "example": 629644
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the file version object was created",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the file version object was last updated",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who last updated the file version"
                  }
                ]
              },
              "trashed_at": {
                "type": "string",
                "description": "When the file version object was trashed.",
                "format": "date-time",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "purged_at": {
                "type": "string",
                "description": "When the file version object was purged.",
                "format": "date-time",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "FileVersion--Mini": {
        "description": "A mini representation of a file version, used when\nnested under another resource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "sha1": {
                "type": "string",
                "description": "The SHA1 hash of this file.",
                "example": "134b65991ed521fcfe4724b7d814ab8ded5185dc"
              }
            }
          }
        ]
      },
      "FileVersionRetention": {
        "description": "A retention policy blocks permanent deletion of content\nfor a specified amount of time. Admins can apply policies to\nspecified folders, or an entire enterprise. A file version retention\nis a  record for a retained file version. To use this feature,\nyou must  have the manage retention policies scope enabled for your\nAPI key via  your application management console. For more information\nabout retention policies, please visit our help documentation",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "file_version": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FileVersion--Mini"
                  },
                  {
                    "description": "The file version this file version retention was\napplied to"
                  }
                ]
              },
              "file": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File--Mini"
                  },
                  {
                    "description": "The file this file version retention was applied to"
                  }
                ]
              },
              "applied_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this file version retention object was\ncreated",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "disposition_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the retention period expires on this file\nversion retention",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "winning_retention_policy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RetentionPolicy--Mini"
                  },
                  {
                    "description": "The winning retention policy applied to this file\nversion retention. A file version can have multiple\nretention policies applied."
                  }
                ]
              }
            }
          }
        ]
      },
      "Folder": {
        "description": "A full representation of a folder, as can be returned from any\nfolder API endpoints by default",
        "allOf": [
          {
            "$ref": "#/components/schemas/Folder--Standard"
          },
          {
            "properties": {
              "sync_state": {
                "type": "string",
                "example": "synced",
                "enum": [
                  "synced",
                  "not_synced",
                  "partially_synced"
                ],
                "description": "Whether this folder will be synced by the Box sync clients or not. Can\nbe `synced`, `not_synced`, or `partially_synced`."
              },
              "has_collaborations": {
                "type": "boolean",
                "example": true,
                "description": "Whether this folder has any collaborators."
              },
              "permissions": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Permissions"
                  },
                  {
                    "description": "An object containing the permissions that the current user has\nfor this item"
                  }
                ]
              },
              "tags": {
                "type": "array",
                "example": [
                  "approved"
                ],
                "items": {
                  "type": "string"
                },
                "description": "All tags applied to this folder."
              },
              "can_non_owners_invite": {
                "type": "boolean",
                "example": true,
                "description": "Whether non-owners can invite collaborators to this folder."
              },
              "is_externally_owned": {
                "type": "boolean",
                "example": true,
                "description": "Whether this folder is owned by a user outside of the enterprise."
              },
              "is_collaboration_restricted_to_enterprise": {
                "type": "boolean",
                "example": true,
                "description": "Whether future collaborations should be restricted to within the\nenterprise only."
              },
              "allowed_shared_link_access_levels": {
                "type": "array",
                "example": "open",
                "enum": [
                  "open",
                  "company",
                  "collaborators"
                ],
                "description": "Access level settings for shared links set by administrator. Can\ninclude `open`, `company`, or `collaborators`."
              },
              "allowed_invitee_roles": {
                "type": "array",
                "description": "Folder [collaboration](#collaboration-object) roles allowed by the\nenterprise administrator.",
                "items": {
                  "type": "string"
                }
              },
              "watermark_info": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WatermarkInfo"
                  },
                  {
                    "description": "Information about the watermarking on this folder"
                  }
                ]
              },
              "metadata": {
                "type": "object",
                "description": "The scope of the metadata",
                "example": "global",
                "additionalProperties": {
                  "type": "object",
                  "description": "The template name for the metadata",
                  "example": "properties",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/Metadata"
                  }
                }
              }
            }
          }
        ]
      },
      "Folder--Standard": {
        "description": "A standard representation of a folder, as returned from any\nfolder API endpoints by default",
        "allOf": [
          {
            "$ref": "#/components/schemas/Folder--Mini"
          },
          {
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time the folder was created.  May be `null` for some folders such\nas root or trash.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "description": {
                "type": "string",
                "description": "The description of the folder.",
                "maxLength": 256,
                "example": "Some pictures I took"
              },
              "size": {
                "type": "integer",
                "description": "The folder size in bytes. Be careful parsing this integer, it can\neasily go into [exponent notation](http://en.wikipedia.org/wiki/\\\nDouble-precision_floating-point_format).",
                "example": 629644
              },
              "path_collection": {
                "type": "array",
                "description": "The path of folders to this folder, starting at the root",
                "items": {
                  "$ref": "#/components/schemas/Folder--Mini"
                }
              },
              "created_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who created this folder"
                  }
                ]
              },
              "modified_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who last modified this folder."
                  }
                ]
              },
              "trashed_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time the folder or its contents were put in the trash. May be\n`null` for some folders such as root or trash.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "purged_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time the folder or its contents will be purged from the trash. May\nbe `null` for some folders such as root or trash.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "content_created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time the folder or its contents were originally created (according\nto the uploader).  May be `null` for some folders such as root or\ntrash.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "content_modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time the folder or its contents were last modified (according to\nthe uploader).  May be `null` for some folders such as root or trash.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "expires_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the folder will automatically be deleted, i.e. expired. This\nattribute cannot be set.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "owned_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who owns this folder."
                  }
                ]
              },
              "shared_link": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SharedLink"
                  },
                  {
                    "description": "The shared link object for this folder. Will be\n`null` if no shared link has been created."
                  }
                ]
              },
              "folder_upload_email": {
                "type": "object",
                "properties": {
                  "access": {
                    "description": "The access level for which the email was created.",
                    "type": "string",
                    "example": "access",
                    "enum": [
                      "open",
                      "company",
                      "collaborators"
                    ]
                  },
                  "email": {
                    "description": "The upload email address for this folder. `null` if not set.",
                    "type": "string",
                    "format": "email",
                    "example": "upload.Picture.k13sdz1@u.box.com"
                  }
                }
              },
              "parent": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Folder--Mini"
                  },
                  {
                    "description": "The folder that contains this folder.\n\nMay be `null` for folders such as root, trash and child folders\nwhose parent is inaccessible."
                  }
                ]
              },
              "item_status": {
                "type": "string",
                "description": "Whether this item is deleted or not. Values include `active`,\n`trashed` if the item has been moved to the trash, and\n`deleted` if the item has been permanently deleted.",
                "enum": [
                  "active",
                  "trashed",
                  "deleted"
                ],
                "example": "active"
              },
              "item_collection": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemReference"
                },
                "description": "A collection of mini file and folder objects contained in this folder."
              }
            }
          }
        ]
      },
      "Folder--Mini": {
        "description": "A mini representation of a file version, used when\nnested under another resource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ItemReference"
          },
          {
            "properties": {
              "sequence_id": {
                "type": "string",
                "example": "1",
                "description": "A unique ID for use with the `/events` endpoint. May be `null` for\nsome folders, such as root or trash."
              },
              "etag": {
                "type": "string",
                "example": "1",
                "description": "The entity tag of this folder object. Used with If-Match\nheaders. May be `null` for some folders such as root or\ntrash."
              },
              "name": {
                "type": "string",
                "description": "The name of the folder.",
                "example": "Pictures"
              }
            }
          }
        ]
      },
      "Group": {
        "description": "Groups contain a set of users, and can be used in place of\nusers in some operations, such as collaborations.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Group--Standard"
          },
          {
            "properties": {
              "provenance": {
                "type": "string",
                "description": "Keeps track of which external source this group is\ncoming from (e.g. \"Active Directory\", \"Google Groups\",\n\"Facebook Groups\").  Setting this will\nalso prevent Box users from editing the group name\nand its members directly via the Box web application.\nThis is desirable for one-way  syncing of groups.",
                "maxLength": 255,
                "example": "Active Directory"
              },
              "external_sync_identifier": {
                "type": "string",
                "description": "An arbitrary identifier that can be used by\nexternal group sync tools to link this Box Group to\nan external group. Example values of this field\ncould be an Active Directory Object ID or a Google\nGroup ID.  We recommend you use of this field in\norder to avoid issues when group names are updated in\neither Box or external systems.",
                "example": "AD:123456"
              },
              "description": {
                "type": "string",
                "description": "Human readable description of the group.",
                "maxLength": 255,
                "example": "Support Group - as imported from Active Directory"
              },
              "invitability_level": {
                "type": "string",
                "example": "admins_only",
                "description": "Specifies who can invite the group to collaborate\non folders (Create Collaboration).\n\nWhen set to `admins_only` the enterprise admin, co-admins,\nand the group's admin can invite the group.\n\nWhen set to `admins_and_members` all the admins listed\nabove and group members can invite the group.\n\nWhen set to `all_managed_users` all managed users in the\nenterprise can invite the group.",
                "enum": [
                  "admins_only",
                  "admins_and_members",
                  "all_managed_users"
                ]
              },
              "member_viewability_level": {
                "type": "string",
                "example": "admins_only",
                "description": "Specifies who can view the members of the group\n(Get Memberships for Group).\n\n* `admins_only - the enterprise admin, co-admins, group's\n  group admin\n* `admins_and_members` - all admins and group members\n* `all_managed_users` - all managed users in the\n  enterprise",
                "enum": [
                  "admins_only",
                  "admins_and_members",
                  "all_managed_users"
                ]
              }
            }
          }
        ]
      },
      "Group--Standard": {
        "description": "A standard representation of a group, as returned from any\ngroup API endpoints by default",
        "allOf": [
          {
            "$ref": "#/components/schemas/Group--Mini"
          },
          {
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the group object was created",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the group object was last modified",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "Group--Mini": {
        "type": "object",
        "description": "Mini representation of the group, including id and name of\ngroup.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the group",
                "example": "Support"
              }
            }
          }
        ]
      },
      "GroupMembership": {
        "description": "Membership is used to signify that a user is part of a\ngroup.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "user": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user that the membership applies to"
                  }
                ]
              },
              "group": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Group--Mini"
                  },
                  {
                    "description": "The group that the membership applies to"
                  }
                ]
              },
              "role": {
                "type": "string",
                "example": "member",
                "description": "The role of the user in the group.",
                "enum": [
                  "member",
                  "admin"
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time this membership was created.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time this membership was last modified.",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "ItemReference": {
        "description": "A generic mini representation of a file, folder, user or enterprise",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "sequence_id": {
                "type": "string",
                "example": "1",
                "description": "A unique ID for use with the `/events` endpoint. May be `null` for\nsome items, such as root or trash."
              },
              "etag": {
                "type": "string",
                "example": "1",
                "description": "The entity tag of this item. Used with If-Match headers.\nMay be `null` for some folders such as root or trash."
              },
              "name": {
                "type": "string",
                "description": "The name of the item.",
                "example": "Pictures"
              }
            }
          }
        ]
      },
      "ItemReferenceCollection": {
        "description": "A list of generic mini representations of a file, folder, user or enterprise",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "properties": {
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemReference"
                }
              }
            }
          }
        ]
      },
      "LegalHold": {
        "description": "File-Version-Legal-Hold is an entity representing all\nholds on a File Version.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "file_version": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FileVersion--Mini"
                  },
                  {
                    "description": "The file version that is held"
                  }
                ]
              },
              "file": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File--Mini"
                  },
                  {
                    "description": "The parent file of the file version that is held.\nNote that there is no guarantee that the current\nversion of this file is held."
                  }
                ]
              },
              "legal_hold_policy_assignments": {
                "description": "List of assignments contributing to this Hold.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LegalHoldPolicyAssignment"
                }
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time",
                "description": "Time that this File-Version-Legal-Hold was\ndeleted.",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "LegalHoldPolicy": {
        "description": "Legal Hold Policy information describes the basic\ncharacteristics of the Policy, such as name, description,\nand filter dates.",
        "allOf": [
          {
            "$ref": "#/components/schemas/LegalHoldPolicy--Mini"
          },
          {
            "properties": {
              "policy_name": {
                "type": "string",
                "example": "Policy 4",
                "description": "Name of the legal hold policy.",
                "maxLength": 254
              },
              "description": {
                "type": "string",
                "description": "Description of the legal hold policy. Optional\nproperty with a 500 character limit.",
                "maxLength": 500,
                "example": "Postman created policy"
              },
              "status": {
                "type": "string",
                "example": "active",
                "enum": [
                  "active",
                  "applying",
                  "releasing",
                  "released"
                ],
                "description": "* 'active' - the policy is not in a transition state\n* 'applying' - that the policy is in the process of\n  being applied\n* 'releasing' - that the process is in the process\n  of being released\n* 'released' - the policy is no longer active"
              },
              "assignment_counts": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssignmentCounts"
                  },
                  {
                    "description": "Counts of assignments within this policy by apply-to type"
                  }
                ]
              },
              "created_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who created the legal hold policy object"
                  }
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the legal hold policy object was created",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the legal hold policy object was modified.\nDoes not update when assignments are added or removed.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the policy release request was sent. (Because\nit can take time for a policy to fully delete, this\nisn't quite the same time that the policy is fully deleted).\n\nIf `null`, the policy was not deleted.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "filter_started_at": {
                "type": "string",
                "format": "date-time",
                "description": "User-specified, optional date filter applies to\nCustodian assignments only",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "filter_ended_at": {
                "type": "string",
                "format": "date-time",
                "description": "User-specified, optional date filter applies to\nCustodian assignments only",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "release_notes": {
                "type": "string",
                "example": "Example",
                "description": "Optional notes about why the policy was created.",
                "maxLength": 500
              }
            }
          }
        ]
      },
      "LegalHoldPolicy--Mini": {
        "description": "A mini legal hold policy",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {}
          }
        ]
      },
      "LegalHoldPolicyAssignment": {
        "description": "Legal Hold Assignments are used to assign Legal Hold\nPolicies to Users, Folders, Files, or File Versions.\n\nCreating a Legal Hold Assignment puts a hold\non the File-Versions that belong to the Assignment's\n'apply-to' entity.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "legal_hold_policy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LegalHoldPolicy--Mini"
                  },
                  {
                    "description": "The policy that the legal hold policy assignment\nis part of"
                  }
                ]
              },
              "assigned_to": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ItemReference"
                  },
                  {
                    "description": "The entity that the legal hold policy assignment\nis assigned to. Includes type and ID."
                  }
                ]
              },
              "assigned_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who created the legal hold policy\nassignment"
                  }
                ]
              },
              "assigned_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the legal hold policy assignment object was\ncreated",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the assignment release request was sent.\n(Because it can take time for an assignment to fully\ndelete, this isn't quite the same time that the\nassignment is fully deleted). If null, Assignment\nwas not deleted.",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "Lock": {
        "description": "The lock held on a file.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "created_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The use who created the lock"
                  }
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "example": "2012-12-12T10:53:43-08:00",
                "description": "The time this lock was created at"
              },
              "expired_at": {
                "type": "string",
                "format": "date-time",
                "example": "2012-12-12T10:53:43-08:00",
                "description": "The time this lock is to expire at, which might be in the past"
              },
              "is_download_prevented": {
                "type": "boolean",
                "example": true,
                "description": "Whether or not the file can be downloaded while locked"
              }
            }
          }
        ]
      },
      "Metadata": {
        "description": "The metadata as applied by a metadata template to a file or\nfolder",
        "properties": {
          "$canEdit": {
            "type": "boolean",
            "example": true,
            "description": "Whether the user can edit this metadata"
          },
          "$id": {
            "type": "string",
            "format": "uuid",
            "example": "01234500-12f1-1234-aa12-b1d234cb567e",
            "description": "36-character UUID to identify the metadata object"
          },
          "$parent": {
            "type": "string",
            "example": "folder_59449484661,",
            "description": "An ID for the parent folder"
          },
          "$scope": {
            "type": "string",
            "example": "enterprise_27335",
            "description": "An ID for the scope in which this template\nhas been applied"
          },
          "$template": {
            "type": "string",
            "example": "blueprintTemplate",
            "description": "The name of the template"
          },
          "$type": {
            "type": "string",
            "example": "blueprintTemplate-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0",
            "description": "A unique identifier for the \"type\" of this instance. This is an internal\nsystem property and should not be used by a client application."
          },
          "$typeVersion": {
            "type": "integer",
            "example": 2,
            "description": "The last-known version of the template of the object. This is an internal\nsystem property and should not be used by a client application."
          },
          "$version": {
            "type": "integer",
            "example": 1,
            "description": "The version of the metadata object. Starts at 0 and increases every time\na user-defined property is modified."
          }
        },
        "additionalProperties": {
          "type": "string",
          "description": "Additional data",
          "example": "foo=bar"
        }
      },
      "MetadataCascadePolicy": {
        "description": "A cascade policy that applies to metadata policy template\nto a folder",
        "properties": {
          "id": {
            "type": "string",
            "example": "6fd4ff89-8fc1-42cf-8b29-1890dedd26d7",
            "description": "The ID of the metadata cascade policy object"
          },
          "owner_enterprise": {
            "type": "object",
            "description": "The enterprise that owns the policy.",
            "properties": {
              "type": {
                "type": "string",
                "example": "`enterprise`",
                "description": "`enterprise`"
              },
              "id": {
                "type": "string",
                "example": "690678",
                "description": "The ID of the enterprise that owns the policy."
              }
            }
          },
          "parent": {
            "type": "object",
            "description": "Represent the folder the policy is applied to",
            "properties": {
              "type": {
                "type": "string",
                "example": "`folder`",
                "description": "`folder`"
              },
              "id": {
                "type": "string",
                "example": "690678",
                "description": "The ID of the folder the policy is applied to"
              }
            }
          },
          "scope": {
            "type": "string",
            "example": "global",
            "description": "The scope of the target instance that will be cascaded down. The `scope`\nand `templateKey` together identify the metadata on the folder that is\nto be cascaded down. Today, only `global` and `enterprise_*` scopes are\nsupported."
          },
          "templateKey": {
            "type": "string",
            "example": "demo",
            "description": "The template key of the target metadata template to cascade down.\nThe `scope` & `templateKey` together identify the metadata on the f\nolder that is to be cascaded down."
          }
        }
      },
      "MetadataTemplate": {
        "description": "A template for metadata as can be applied to files and folders",
        "properties": {
          "templateKey": {
            "type": "string",
            "example": "productInfo",
            "description": "A unique identifier for the template. The identifier must be unique across\nthe scope of the enterprise to which the metadata template is being\napplied.",
            "maxLength": 64,
            "pattern": "^[a-zA-Z_][-a-zA-Z0-9_]*$"
          },
          "scope": {
            "type": "string",
            "description": "The scope of the object. `global` and `enterprise_*` scopes are supported.\n\nThe `global` scope contains the template with a key of `properties`,\nwhile the enterprise scope pertains to custom templates created within\nthe enterprise.\n\n The ID of the enterprise will be appended to the enterprise scope.",
            "example": "enterprise_123456"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the template",
            "maxLength": 4096,
            "example": "Product Info"
          },
          "hidden": {
            "type": "boolean",
            "example": true,
            "description": "Whether this template is hidden in the UI",
            "default": false
          },
          "fields": {
            "type": "array",
            "description": "The ordered set of key:value pairs for the template.",
            "items": {
              "$ref": "#/components/schemas/MetadataTemplateField"
            }
          }
        }
      },
      "MetadataTemplateField": {
        "description": "An ordered set of key-value pairs that are part of a\nmetadata template",
        "properties": {
          "type": {
            "type": "string",
            "example": "string",
            "description": "The data type of the field's value",
            "enum": [
              "string",
              "enum",
              "float",
              "date"
            ]
          },
          "key": {
            "type": "string",
            "example": "category",
            "description": "A unique identifier for the field. The identifier must\nbe unique within the template to which it belongs.",
            "maxLength": 256
          },
          "displayName": {
            "type": "string",
            "example": "Category",
            "description": "The display name of the field.",
            "maxLength": 4096
          },
          "description": {
            "type": "string",
            "example": "The category",
            "description": "A description of the field.",
            "maxLength": 4096
          },
          "hidden": {
            "type": "boolean",
            "example": true,
            "description": "Whether this template is hidden in the UI"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataTemplateFieldOption"
            }
          }
        }
      },
      "MetadataTemplateFieldOption": {
        "description": "For type `enum` and `multiSelect`, one of the potential values\nthat can be selected",
        "properties": {
          "id": {
            "type": "string",
            "example": "f7a9895f",
            "description": "The ID of the option"
          },
          "key": {
            "description": "The text value of the option",
            "example": "category1",
            "type": "string"
          }
        }
      },
      "OAuth2Error": {
        "description": "An OAuth2 error",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_client",
            "description": "The type of the error returned."
          },
          "error_description": {
            "type": "string",
            "example": "The client credentials are invalid",
            "description": "The type of the error returned."
          }
        }
      },
      "Pagination": {
        "description": "The part of an API response that describes pagination",
        "properties": {
          "total_count": {
            "description": "One greater than the offset of the last entry in the entire collection.\nThe total number of entries in the collection may be less than\n`total_count`.",
            "example": 5000,
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "description": "The limit that was used for these entries. This will be the same as the\n`limit` query parameter unless that value exceeded the maximum value\nallowed. The maximum value varies by API.",
            "example": 1000,
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "description": "The 0-based offset of the first entry in this set. This will be the same\nas the `offset` query parameter.",
            "example": 2000,
            "type": "integer",
            "format": "int64"
          },
          "order": {
            "description": "The order by which items are returned",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaginationOrder"
            }
          }
        }
      },
      "PaginationOrder": {
        "description": "The order in which a pagination is ordered",
        "properties": {
          "by": {
            "description": "The field to order by",
            "example": "type",
            "type": "string"
          },
          "direction": {
            "type": "string",
            "description": "The direction to order by, either ascending or descending",
            "example": "ASC",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        }
      },
      "Permissions": {
        "description": "The part of an API response that describes permissions",
        "properties": {
          "can_access": {
            "type": "boolean",
            "description": "Whether the current user can access the item",
            "example": true
          },
          "can_upload": {
            "type": "boolean",
            "description": "Whether the current user can upload to the item",
            "example": true
          },
          "can_rename": {
            "type": "boolean",
            "description": "Whether the current user can rename the item",
            "example": true
          },
          "can_delete": {
            "type": "boolean",
            "description": "Whether the current user can delete the item",
            "example": true
          },
          "can_share": {
            "type": "boolean",
            "description": "Whether the current user can share the item",
            "example": true
          },
          "can_invite_collaborator": {
            "type": "boolean",
            "description": "Whether the current user can invite collaborators to the item",
            "example": true
          },
          "can_set_share_access": {
            "type": "boolean",
            "description": "Whether the current user can set share permissions for the item",
            "example": true
          }
        }
      },
      "RecentItem": {
        "description": "Recent Items returns information about files that have\nbeen accessed by a user recently. It keeps track of items\nthat were accessed either in the last 90 days or the last\n1000 items accessed",
        "properties": {
          "type": {
            "type": "string",
            "description": "`recent_item`",
            "example": "recent_item"
          },
          "item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemReference"
              },
              {
                "description": "The item that was recently accessed."
              }
            ]
          },
          "interaction_type": {
            "type": "string",
            "example": "item_preview",
            "description": "The most recent type of access the user performed on\nthe item.",
            "enum": [
              "item_preview",
              "item_upload",
              "item_comment",
              "item_open",
              "item_modify"
            ]
          },
          "interacted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time of the most recent interaction.",
            "example": "2018-04-13T13:53:23-07:00"
          },
          "interaction_shared_link": {
            "type": "string",
            "example": "https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg",
            "description": "If the item was accessed through a shared link it will appear here,\notherwise this will be null."
          }
        }
      },
      "Reference": {
        "description": "The bare basic reference for an object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the object",
            "example": "11446498"
          },
          "type": {
            "type": "string",
            "description": "The type of object, defaults to `folder`",
            "example": "file",
            "enum": [
              "folder",
              "file",
              "user",
              "file_version",
              "lock",
              "collaboration",
              "comment",
              "task",
              "web_link",
              "collection",
              "task_assignment",
              "event",
              "realtime_server",
              "webhook_event",
              "webhook",
              "enterprise",
              "invite",
              "email_alias",
              "group",
              "group_membership",
              "device_pinner",
              "retention_policy",
              "retention_policy_assignment",
              "file_version_retention",
              "legal_hold_policy",
              "legal_hold_policy_assignment",
              "legal_hold",
              "upload_session"
            ]
          }
        }
      },
      "RetentionPolicy": {
        "title": "Retention Policy Object",
        "description": "A retention policy blocks permanent deletion of content\nfor a specified amount of time. Admins can create retention\npolicies and then later assign them to specific folders\nor their entire enterprise.  To use this feature, you must\nhave the manage retention policies scope enabled\nfor your API key via your application management console.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RetentionPolicy--Mini"
          },
          {
            "properties": {
              "policy_type": {
                "type": "string",
                "example": "finite",
                "description": "The type of the retention policy. A retention\npolicy type can either be `finite`, where a\nspecific amount of time to retain the content is known\nupfront, or `indefinite`, where the amount of time\nto retain the content is still unknown.",
                "enum": [
                  "finite",
                  "indefinite"
                ]
              },
              "retention_length": {
                "type": "string",
                "example": "0",
                "description": "The length of the retention policy. This length\nspecifies the duration in days that the retention\npolicy will be active for after being assigned to\ncontent.  If the policy has A `policy_type` of\n`indefinite`, the `retention_length` will also be\n`indefinite`."
              },
              "disposition_action": {
                "type": "string",
                "example": "permanently_delete",
                "description": "The disposition action of the retention policy.\nThis action can be `permanently_delete`, which\nwill cause the content retained by the policy\nto be permanently deleted, or `remove_retention`,\nwhich will lift the retention policy from the content,\nallowing it to be deleted by users,\nonce the retention policy time period has passed.",
                "enum": [
                  "permanently_delete",
                  "remove_retention"
                ]
              },
              "status": {
                "type": "string",
                "example": "active",
                "description": "The status of the retention policy. The status of\na policy will be `active`, unless explicitly retired by an\nadministrator, in which case the status will be `retired`.\nOnce a policy has been retired, it cannot become\nactive again.",
                "enum": [
                  "active",
                  "retired"
                ]
              },
              "created_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "A mini user object representing the user that\ncreated the retention policy"
                  }
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the retention policy object was created",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the retention policy object was last modified",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "RetentionPolicy--Mini": {
        "description": "Mini representation of the retention policy",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "policy_name": {
                "type": "string",
                "description": "The name given to the retention policy",
                "example": "Some Policy Name"
              }
            }
          }
        ]
      },
      "RetentionPolicyAssignment": {
        "description": "The retention policy assignment endpoint provides a way\nfor admins to apply a retention policy on a per-folder\nbasis, or place a blanket policy over the entire\nenterprise.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "retention_policy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RetentionPolicy--Mini"
                  },
                  {
                    "description": "A mini retention policy object representing the\nretention policy that has been assigned to this content"
                  }
                ]
              },
              "assigned_to": {
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Folder--Mini"
                      },
                      {
                        "$ref": "#/components/schemas/Enterprise"
                      }
                    ]
                  },
                  {
                    "description": "The `type` and `id` of the content that is under\nretention. The `type` can either be `folder` or `\nenterprise`."
                  }
                ]
              },
              "assigned_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "A mini user object representing the user that\ncreated the retention policy assignment object"
                  }
                ]
              },
              "assigned_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the retention policy assignment object was\ncreated",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "SharedLink": {
        "description": "Shared links provide direct, read-only access to files or folder on Box\nusing a URL. Shared links with open access level allow anyone with the URL\nto access the item, while shared links with company or collaborators access\nlevels can only be accessed by appropriate authenticated Box users.",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to access the item on Box.  If entered in a browser, this URL will\ndisplay the item in Box's preview UI.  If a custom URL is set this field\nwill return the custom URL, but the original URL will also continue to\nwork.",
            "example": "https://www.box.com/s/vspke7y05sb214wjokpk"
          },
          "download_url": {
            "type": "string",
            "description": "The \"direct Link\" URL to download the item.  If entered in a browser, this\nURL will trigger a download of the item.  This URL includes the file\nextension so that the file will be saved with the right file type.",
            "example": "https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg"
          },
          "vanity_url": {
            "type": "string",
            "description": "The \"Custom URL\" that can also be used to preview the item on Box.  Custom\nURLs can only be created or modified in the Box Web application.",
            "example": "https://acme.app.box.com/v/my_url/"
          },
          "access": {
            "type": "string",
            "description": "The access level specified when the shared link was created. Can be `open`\n(\"People with the link\"), `company` (\"People in your company\"), or\n`collaborators` (\"People in this folder\").  When creating a shared link,\nif you omit this field then the access level will be set to the default\naccess level specified by the enterprise admin.",
            "enum": [
              "open",
              "company",
              "collaborators"
            ],
            "example": "open"
          },
          "effective_access": {
            "type": "string",
            "description": "The effective access level for the shared link.  This can be lower than\nthe value in the `access` field if the enterprise settings restrict the\nallowed access levels.",
            "enum": [
              "open",
              "company",
              "collaborators"
            ],
            "example": "company"
          },
          "unshared_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time that this link will become disabled. This field can only be\nset by users with paid accounts.",
            "example": "2018-04-13T13:53:23-07:00"
          },
          "is_password_enabled": {
            "type": "boolean",
            "description": "Whether the shared link has a password set",
            "example": true
          },
          "permissions": {
            "type": "object",
            "properties": {
              "can_download": {
                "type": "boolean",
                "example": true,
                "description": "Whether the shared link allows downloads.  For shared links on\nfolders, this also applies to any items in the folder. Can only be set\nwith access levels `open` and `company` (not `collaborators`)."
              },
              "can_preview": {
                "type": "boolean",
                "example": true,
                "description": "Whether the shared link allows previewing.  Always `true`.  For shared\nlinks on folders, this also applies to any items in the folder."
              }
            }
          },
          "download_count": {
            "type": "integer",
            "example": 3,
            "description": "The number of times the item has been downloaded"
          },
          "preview_count": {
            "type": "integer",
            "example": 3,
            "description": "The number of times the item has been previewed"
          }
        }
      },
      "Skill": {
        "description": "An object representing a skill",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the skill",
                "example": "Hello World Skill"
              },
              "api_key": {
                "type": "string",
                "description": "The client ID of the application",
                "example": "hxel2s12wd2h9r8ne103c4gjbqefofih"
              }
            }
          }
        ]
      },
      "SkillInvocation": {
        "description": "The payload of a Box skill as sent to a Custom Skill's\n`invocation_url`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the invocation request.",
                "example": "fd1d2e53-35f5-41fb-9c25-4ba326daf2f9_341016304"
              },
              "skill": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Skill"
                  },
                  {
                    "description": "The skill that triggered this invocation"
                  }
                ]
              },
              "token": {
                "type": "object",
                "description": "The read-only and read-write access tokens for this item",
                "properties": {
                  "read": {
                    "$ref": "#/components/schemas/AccessToken--Mini"
                  },
                  "write": {
                    "$ref": "#/components/schemas/AccessToken--Mini"
                  }
                }
              },
              "status": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "string",
                    "example": "invoked",
                    "description": "The state of this event.\n\n* `invoked` - Triggered the skill with event details to start\n  applying skill on the file.\n* `processing` - Currently processing.\n* `success` - Completed processing with a success.\n* `transient_failure` - Encountered a failure which can be\n  retried.\n* `permanent_failure` -  Encountered a permanent failure and\n  retry would not help.",
                    "enum": [
                      "invoked",
                      "processing",
                      "success",
                      "transient_failure",
                      "permanent_failure"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "example": "Example",
                    "description": "Status information"
                  },
                  "error_code": {
                    "type": "string",
                    "example": "400",
                    "description": "Error code information, if error occurred."
                  },
                  "additional_info": {
                    "type": "string",
                    "example": "Example",
                    "description": "Additional status information."
                  }
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time this invocation was created.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "trigger": {
                "type": "string",
                "example": "FILE_CONTENT",
                "description": "Action that triggered the invocation"
              },
              "enterprise": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Enterprise"
                  },
                  {
                    "description": "The enterprise that this invocation was triggered for"
                  }
                ]
              },
              "source": {
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/File--Standard"
                      },
                      {
                        "$ref": "#/components/schemas/Folder--Standard"
                      }
                    ]
                  },
                  {
                    "description": "The item that caused the invocation to trigger"
                  }
                ]
              },
              "event": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Event"
                  },
                  {
                    "description": "The event that triggered this invocation"
                  }
                ]
              }
            }
          }
        ]
      },
      "StoragePolicy": {
        "description": "The Storage Policy object describes the storage zone.",
        "allOf": [
          {
            "$ref": "#/components/schemas/StoragePolicy--Mini"
          },
          {
            "properties": {
              "name": {
                "description": "A descriptive name of the region",
                "type": "string",
                "example": "Montreal / Dublin"
              }
            }
          }
        ]
      },
      "StoragePolicy--Mini": {
        "description": "A mini description of a Storage Policy object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {}
          }
        ]
      },
      "StoragePolicyAssignment": {
        "description": "The assignment of a storage policy to a user or enterprise",
        "allOf": [
          {
            "$ref": "#/components/schemas/StoragePolicyAssignment"
          },
          {
            "properties": {
              "storage_policy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/StoragePolicy--Mini"
                  },
                  {
                    "description": "The assigned storage policy"
                  }
                ]
              },
              "assigned_to": {
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/Enterprise"
                      },
                      {
                        "$ref": "#/components/schemas/User"
                      }
                    ]
                  },
                  {
                    "description": "The enterprise or use the policy is assigned to"
                  }
                ]
              }
            }
          }
        ]
      },
      "Task": {
        "description": "Tasks enabled file-centric workflows in Box. Users can\ncreate tasks on files and assign them to collaborators on\nBox.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "item": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File--Mini"
                  },
                  {
                    "description": "The file associated with the task"
                  }
                ]
              },
              "due_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the task is due",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "action": {
                "type": "string",
                "example": "review",
                "description": "The action the task assignee will be prompted to\ndo.",
                "enum": [
                  "review"
                ]
              },
              "message": {
                "type": "string",
                "description": "A message that will be included with the task",
                "example": "Legal review"
              },
              "task_assignment_collection": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskAssignmentCollection"
                  },
                  {
                    "description": "A collection of task assignment objects\nassociated with the task"
                  }
                ]
              },
              "is_completed": {
                "type": "boolean",
                "description": "Whether the task has been completed",
                "example": true
              },
              "created_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who created the task"
                  }
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the task object was created",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "TaskAssignment": {
        "description": "An assignment of a task to a file and user",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "item": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/File--Mini"
                  },
                  {
                    "description": "The file the task has been assigned to"
                  }
                ]
              },
              "assigned_to": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user the task has been assigned to"
                  }
                ]
              },
              "message": {
                "type": "string",
                "example": "Please review",
                "description": "A message that will be included with this task\nassignment"
              },
              "completed_at": {
                "type": "string",
                "format": "date-time",
                "description": "The date at which this task assignment was\ncompleted",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "assigned_at": {
                "type": "string",
                "format": "date-time",
                "description": "The date at which this task assignment was\nassigned",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "reminded_at": {
                "type": "string",
                "format": "date-time",
                "description": "The date at which this task assignment was\nreminded",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "resolution_state": {
                "type": "string",
                "description": "State of this assignment",
                "example": "incomplete",
                "enum": [
                  "completed",
                  "incomplete",
                  "approved",
                  "rejected"
                ]
              },
              "assigned_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who assigned this task"
                  }
                ]
              }
            }
          }
        ]
      },
      "TaskAssignmentCollection": {
        "type": "object",
        "description": "A list of task assignments",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          },
          {
            "properties": {
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskAssignment"
                }
              }
            }
          }
        ]
      },
      "TermsOfService": {
        "description": "The root-level record that is supposed to represent a\nsingle Terms of Service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TermsOfService--Mini"
          },
          {
            "properties": {
              "status": {
                "description": "Whether these terms are enabled or not",
                "type": "string",
                "example": "enabled",
                "enum": [
                  "enabled",
                  "disabled"
                ]
              },
              "enterprise": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Enterprise"
                  },
                  {
                    "description": "The enterprise these terms apply to"
                  }
                ]
              },
              "tos_type": {
                "description": "Whether to apply these terms to managed users or external users",
                "type": "string",
                "example": "managed",
                "enum": [
                  "managed",
                  "external"
                ]
              },
              "text": {
                "description": "The text for your terms and conditions. This text could be\nempty if the status is disabled",
                "type": "string",
                "example": "By using this service, you agree to ..."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the legal item was created",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the legal item was modified.",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "TermsOfService--Mini": {
        "description": "The root-level record that is supposed to represent a\nsingle Terms of Service.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {}
          }
        ]
      },
      "TermsOfServiceUserStatus": {
        "description": "The association between a Terms of Service and a user",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "tos": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TermsOfService--Mini"
                  },
                  {
                    "description": "The terms of service"
                  }
                ]
              },
              "user": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user"
                  }
                ]
              },
              "is_accepted": {
                "type": "boolean",
                "example": true,
                "description": "If the user has accepted the terms of services"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the legal item was created",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the legal item was modified.",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        ]
      },
      "TokenRequest": {
        "description": "A request for a new OAuth2 token",
        "required": [
          "grant_type"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "format": "urn",
            "example": "authorization_code",
            "description": "The type of request being made, either using a client-side obtained\nauthorization code, a refresh token, a JWT assertion, or another access\ntoken for the purpose of downscoping a token.",
            "enum": [
              "authorization_code",
              "refresh_token",
              "urn:ietf:params:oauth:grant-type:jwt-bearer",
              "urn:ietf:params:oauth:grant-type:token-exchange"
            ]
          },
          "client_id": {
            "type": "string",
            "format": "token",
            "description": "The Client ID of the application requesting an access token.\n\nUsed in combination with `authorization_code` or\n`urn:ietf:params:oauth:grant-type:jwt-bearer` as the `grant_type`.",
            "example": "ly1nj6n11vionaie65emwzk575hnnmrk"
          },
          "client_secret": {
            "type": "string",
            "format": "token",
            "description": "The client secret of the application requesting an access token.\n\nUsed in combination with `authorization_code` or\n`urn:ietf:params:oauth:grant-type:jwt-bearer` as the `grant_type`.",
            "example": "hOzsTeFlT6ko0dme22uGbQal04SBPYc1"
          },
          "code": {
            "type": "string",
            "format": "token",
            "description": "The client-side authorization code passed to your application by\nBox in the browser redirect after the user has successfully\ngranted your application permission to make API calls on their\nbehalf.\n\nUsed in combination with `authorization_code` as the `grant_type`.",
            "example": "n22JPxrh18m4Y0wIZPIqYZK7VRrsMTWW"
          },
          "refresh_token": {
            "type": "string",
            "format": "token",
            "description": "A refresh token used to get a new access token with.\n\nUsed in combination with `refresh_token` as the `grant_type`.",
            "example": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ"
          },
          "assertion": {
            "type": "string",
            "format": "jwt",
            "description": "A JWT assertion for which to request a new access token.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:jwt-bearer`\nas the `grant_type`.",
            "example": "xxxxx.yyyyy.zzzzz"
          },
          "subject_token": {
            "type": "string",
            "format": "token",
            "description": "The token to exchange for a downscoped token. This can be a regular\naccess token, a JWT assertion, or an app token.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
            "example": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ"
          },
          "subject_token_type": {
            "type": "string",
            "format": "urn",
            "example": "urn:ietf:params:oauth:token-type:access_token",
            "description": "The type of `subject_token` passed in.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
            "enum": [
              "urn:ietf:params:oauth:token-type:access_token"
            ]
          },
          "actor_token": {
            "type": "string",
            "format": "token",
            "description": "The actor token used to create an annotator token.\nThis is a JWT assertion.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
            "example": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ"
          },
          "actor_token_type": {
            "type": "string",
            "format": "urn",
            "example": "urn:ietf:params:oauth:token-type:id_token",
            "description": "The type of `actor_token` passed in.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
            "enum": [
              "urn:ietf:params:oauth:token-type:id_token"
            ]
          },
          "scope": {
            "type": "string",
            "format": "space_delimited_list",
            "description": "The space-delimited list of scopes that you want apply to the\nnew access token.\n\nThe `subject_token` will need to have all of these scopes or\nthe call will error with **401 Unauthorized**.",
            "example": "item_upload item_preview base_explorer"
          },
          "resource": {
            "type": "string",
            "format": "uri",
            "description": "Full URL for the file that the token should be generated for.",
            "example": "https://api.box.com/2.0/files/123456"
          }
        }
      },
      "TokenRevocationRequest": {
        "description": "A request to revoke an OAuth2 token",
        "required": [
          "grant_type"
        ],
        "properties": {
          "client_id": {
            "type": "string",
            "format": "token",
            "description": "The Client ID of the application requesting to revoke the\naccess token.",
            "example": "ly1nj6n11vionaie65emwzk575hnnmrk"
          },
          "client_secret": {
            "type": "string",
            "format": "token",
            "description": "The client secret of the application requesting to revoke\nan access token.",
            "example": "hOzsTeFlT6ko0dme22uGbQal04SBPYc1"
          },
          "token": {
            "type": "string",
            "format": "token",
            "description": "The access token to revoke.",
            "example": "n22JPxrh18m4Y0wIZPIqYZK7VRrsMTWW"
          }
        }
      },
      "User": {
        "description": "A full representation of a user, as can be returned from any\nuser API endpoints by default",
        "allOf": [
          {
            "$ref": "#/components/schemas/User--Standard"
          },
          {
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "admin",
                  "coadmin",
                  "user"
                ],
                "description": "The userâ€™s enterprise role",
                "example": "admin"
              },
              "tracking_codes": {
                "type": "array",
                "description": "An array of key/value pairs set by the userâ€™s admin",
                "example": "TBD",
                "items": {
                  "type": "string"
                }
              },
              "can_see_managed_users": {
                "type": "boolean",
                "example": true,
                "description": "Whether the user can see other enterprise users in her contact list"
              },
              "is_sync_enabled": {
                "type": "boolean",
                "description": "Whether the user can use Box Sync",
                "example": true
              },
              "is_external_collab_restricted": {
                "type": "boolean",
                "example": true,
                "description": "Whether the user is allowed to collaborate with users outside her\nenterprise"
              },
              "is_exempt_from_device_limits": {
                "type": "boolean",
                "example": true,
                "description": "Whether to exempt the user from Enterprise device limits"
              },
              "is_exempt_from_login_verification": {
                "type": "boolean",
                "example": true,
                "description": "Whether the user must use two-factor authentication"
              },
              "enterprise": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Enterprise"
                  },
                  {
                    "description": "Representation of the userâ€™s enterprise"
                  }
                ]
              },
              "my_tags": {
                "type": "array",
                "example": [
                  "important",
                  "needs review"
                ],
                "description": "Tags for all files and folders owned by the user. Values returned\nwill  only contain tags that were set by the requester."
              },
              "hostname": {
                "type": "string",
                "example": "https://example.com/",
                "description": "The root (protocol, subdomain, domain) of any links that need to be\ngenerated for the user"
              },
              "is_platform_access_only": {
                "type": "boolean",
                "example": true,
                "description": "Whether the user is an App User"
              }
            }
          }
        ]
      },
      "User--Standard": {
        "description": "A standard representation of a user, as returned from any\nuser API endpoints by default",
        "allOf": [
          {
            "$ref": "#/components/schemas/User--Mini"
          },
          {
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the user object was created",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the user object was last modified",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "language": {
                "type": "string",
                "format": "ISO639-1-BOX",
                "description": "The user's preferred language",
                "example": "en"
              },
              "timezone": {
                "type": "string",
                "format": "timezone",
                "description": "The user's timezone",
                "example": "Africa/Bujumbura"
              },
              "space_amount": {
                "type": "integer",
                "description": "The userâ€™s total available space amount in bytes",
                "example": 11345156112
              },
              "space_used": {
                "type": "integer",
                "description": "The amount of space in use by the user",
                "example": 1237009912
              },
              "max_upload_size": {
                "type": "integer",
                "description": "The maximum individual file size in bytes the user can have",
                "example": 2147483648
              },
              "status": {
                "type": "string",
                "enum": [
                  "active",
                  "inactive",
                  "cannot_delete_edit",
                  "cannot_delete_edit_upload"
                ],
                "description": "The user's account status",
                "example": "active"
              },
              "job_title": {
                "type": "string",
                "description": "The userâ€™s job title",
                "maxLength": 100,
                "example": "CEO"
              },
              "phone": {
                "type": "string",
                "description": "The userâ€™s phone number",
                "maxLength": 100,
                "example": 6509241374
              },
              "address": {
                "type": "string",
                "description": "The userâ€™s address",
                "maxLength": 255,
                "example": "900 Jefferson Ave, Redwood City, CA 94063"
              },
              "avatar_url": {
                "type": "string",
                "description": "URL of the userâ€™s avatar image",
                "example": "https://www.box.com/api/avatar/large/181216415"
              }
            }
          }
        ]
      },
      "User--Mini": {
        "description": "A mini representation of a user, used when\nnested under another resource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the user",
                "example": "Aaron Levie",
                "maxLength": 50
              },
              "login": {
                "type": "string",
                "description": "The email address the user uses to log in",
                "example": "ceo@box.com"
              }
            }
          }
        ]
      },
      "Watermark": {
        "description": "A watermark is a semi-transparent overlay on an embedded file\npreview that displays a viewer's email address or user ID\nand the time of access over a file's content",
        "properties": {
          "watermark": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this watermark was created",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this task was modified",
                "example": "2012-12-12T10:53:43-08:00"
              }
            }
          }
        }
      },
      "WatermarkInfo": {
        "description": "The watermark information about this item",
        "properties": {
          "is_watermarked": {
            "type": "boolean",
            "description": "Whether the item is watermarked or not.",
            "example": true
          }
        }
      },
      "Webhook": {
        "description": "Represents a configured webhook.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "target": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Reference"
                  },
                  {
                    "description": "A reference to the item that will be monitored\nand webhooks created for"
                  }
                ]
              },
              "created_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who created the webhook"
                  }
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "A timestamp identifying the time that\nthe webhook was created.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "address": {
                "type": "string",
                "example": "https://example.com/webhooks",
                "description": "The URL that is notified by this webhook"
              },
              "triggers": {
                "type": "array",
                "example": [
                  "FILE.UPLOADED",
                  "FILE.CREATED"
                ],
                "description": "An array of event names that this webhook is\nto be triggered for",
                "items": {
                  "$ref": "#/components/schemas/WebhookTrigger"
                }
              }
            }
          }
        ]
      },
      "WebhookEvent": {
        "description": "The event that is sent to a webhook address when an event happens",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "properties": {
              "webhook": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Webhook"
                  },
                  {
                    "description": "The webhook object that triggered this event"
                  }
                ]
              },
              "created_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user that triggered this event"
                  }
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "A timestamp identifying the time that\nthe webhook event was triggered.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "trigger": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WebhookTrigger"
                  },
                  {
                    "description": "The event name that triggered this webhook"
                  }
                ]
              },
              "source": {
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/File--Standard"
                      },
                      {
                        "$ref": "#/components/schemas/Folder--Standard"
                      }
                    ]
                  },
                  {
                    "description": "The item that caused the event to trigger"
                  }
                ]
              }
            }
          }
        ]
      },
      "WebhookTrigger": {
        "example": "FILE.UPLOADED",
        "type": "string",
        "description": "The event name that triggered this webhook",
        "enum": [
          "FILE.UPLOADED",
          "FILE.PREVIEWED",
          "FILE.DOWNLOADED",
          "FILE.TRASHED",
          "FILE.DELETED",
          "FILE.RESTORED",
          "FILE.COPIED",
          "FILE.MOVED",
          "FILE.LOCKED",
          "FILE.UNLOCKED",
          "FILE.RENAMED",
          "COMMENT.CREATED",
          "COMMENT.UPDATED",
          "COMMENT.DELETED",
          "TASK_ASSIGNMENT.CREATED",
          "TASK_ASSIGNMENT.UPDATED",
          "METADATA_INSTANCE.CREATED",
          "METADATA_INSTANCE.UPDATED",
          "METADATA_INSTANCE.DELETED",
          "FOLDER.CREATED",
          "FOLDER.RENAMED",
          "FOLDER.DOWNLOADED",
          "FOLDER.RESTORED",
          "FOLDER.DELETED",
          "FOLDER.COPIED",
          "FOLDER.MOVED",
          "FOLDER.TRASHED",
          "WEBHOOK.DELETED",
          "COLLABORATION.CREATED",
          "COLLABORATION.ACCEPTED",
          "COLLABORATION.REJECTED",
          "COLLABORATION.REMOVED",
          "COLLABORATION.UPDATED",
          "SHARED_LINK.DELETED",
          "SHARED_LINK.CREATED",
          "SHARED_LINK.UPDATED"
        ]
      },
      "WebLink": {
        "description": "Web links are objects that point to URLs. These objects\nare also known as bookmarks within the Box web application.\n\nWeb link objects are treated similarly to file objects,\nthey will also support most actions that apply to regular files.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ItemReference"
          },
          {
            "properties": {
              "parent": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ItemReference"
                  },
                  {
                    "description": "The parent object the web link belongs to"
                  }
                ]
              },
              "url": {
                "type": "string",
                "example": "https://www.example.com/example/1234",
                "description": "The URL this web link points to"
              },
              "description": {
                "type": "string",
                "example": "Example page",
                "description": "The description accompanying the web link. This is\nvisible within the Box web application."
              },
              "path_collection": {
                "type": "array",
                "description": "The path of folders to this link, starting at the root",
                "items": {
                  "$ref": "#/components/schemas/Folder--Mini"
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this file was created on Boxâ€™s servers.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this file was last updated on the Box\nservers.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "trashed_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this file was last moved to the trash.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "purged_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this file will be permanently deleted.",
                "example": "2012-12-12T10:53:43-08:00"
              },
              "created_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who created this web link"
                  }
                ]
              },
              "modified_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who last modified this web link"
                  }
                ]
              },
              "owned_by": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User--Mini"
                  },
                  {
                    "description": "The user who owns this web link"
                  }
                ]
              },
              "shared_link": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SharedLink"
                  },
                  {
                    "description": "The shared link object for this item. Will be\n`null` if no shared link has been created."
                  }
                ]
              },
              "item_status": {
                "type": "string",
                "example": "active",
                "enum": [
                  "active",
                  "trashed",
                  "deleted"
                ],
                "description": "Whether this item is deleted or not. Values include `active`,\n`trashed` if the file has been moved to the trash, and `deleted` if\nthe file has been permanently deleted"
              }
            }
          }
        ]
      }
    }
  },
  "security": [
    {
      "OAuth2Security": []
    }
  ]
}